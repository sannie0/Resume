import telebot
from telebot import types
from collections import defaultdict
import time
import re
from datetime import datetime


TOKEN = "6965495172:AAGz4jNrcHZgu7hU6LPMedwUkr5-3bj63T8"
bot = telebot.TeleBot(TOKEN)

user_data = defaultdict(dict)

STEP = 0

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –Ω–∞ —Ç–≤–æ–π –≤–∫—É—Å.\n\n"
        "–í–æ—Ç —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n"
        "1. –ù–∞–∂–º–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.\n"
        "2. –í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω.\n"
        "3. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        "4. –ü–æ–ª—É—á–∏ —Å–≤–æ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ!"
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['start'])
def main(message):
    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    button_create_resume = types.InlineKeyboardButton(text='–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ', callback_data='create_resume')
    markup_inline.add(button_create_resume)
    bot.send_message(message.chat.id, f'<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!</b>\n\n'
                                      '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –Ω–∞ —Ç–≤–æ–π –≤–∫—É—ÅüìÑ\n\n'
                                      '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—åüëá', parse_mode='html', reply_markup=markup_inline)

@bot.callback_query_handler(func=lambda call: call.data.startswith('template_'))
def choose_template(call):
    template_number = int(call.data.split('_')[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id
    user_data[user_id]['template'] = template_number

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

    bot.send_message(call.message.chat.id, f'¬´–®–∞–±–ª–æ–Ω {template_number}¬ª –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ! ‚úÖ\n'
                                           '–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.')

    personal_info(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'create_resume')
def create_resume(call):
    global STEP
    STEP += 1
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.delete_message(call.message.chat.id, call.message.message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ —Å —à–∞–≥–æ–º 1 –∏–∑ 9
    bot.send_message(call.message.chat.id, '<b>–®–∞–≥ 1 –∏–∑ 5.</b> –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞.', parse_mode='html')

    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–æ–π (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)
    media_group = []
    markup_inline = types.InlineKeyboardMarkup()

    for i in range(1, 6):
        photo_path = f'/Users/annasemenova/Desktop/—Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª/–ø—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å/image/{i}.jpg'
        media_group.append(types.InputMediaPhoto(media=open(photo_path, 'rb')))

    button1 = types.InlineKeyboardButton(text='–®–∞–±–ª–æ–Ω 1', callback_data='template_1')
    markup_inline.add(button1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
    for i in range(2, 6, 2):
        button_left = types.InlineKeyboardButton(text=f'–®–∞–±–ª–æ–Ω {i}', callback_data=f'template_{i}')
        button_right = types.InlineKeyboardButton(text=f'–®–∞–±–ª–æ–Ω {i + 1}', callback_data=f'template_{i + 1}')
        markup_inline.add(button_left, button_right)

    bot.send_media_group(call.message.chat.id, media=media_group)
    bot.send_message(call.message.chat.id, '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ, –≤—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—èüìã',
                     reply_markup=markup_inline)

def show_progress(chat_id):
    user_id = chat_id
    progress_message = f'<b>–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\n'

    if 'template' in user_data[user_id]:
        progress_message += f'–®–∞–±–ª–æ–Ω: {user_data[user_id]["template"]}\n'
    if 'name' in user_data[user_id]:
        progress_message += f'–ò–º—è: {user_data[user_id]["name"]}\n'
    if 'lastname' in user_data[user_id]:
        progress_message += f'–§–∞–º–∏–ª–∏—è: {user_data[user_id]["lastname"]}\n'
    if 'patr' in user_data[user_id]:
        progress_message += f'–û—Ç—á–µ—Å—Ç–≤–æ: {user_data[user_id]["patr"]}\n'
    if 'email' in user_data[user_id]:
        progress_message += f'–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {user_data[user_id]["email"]}\n'
    if 'phone' in user_data[user_id]:
        progress_message += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data[user_id]["phone"]}\n'
    if 'citizenship' in user_data[user_id]:
        progress_message += f'–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {user_data[user_id]["citizenship"]}\n'
    if 'birthdate' in user_data[user_id]:
        progress_message += f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data[user_id]["birthdate"]}\n'
    if 'gender' in user_data[user_id]:
        progress_message += f'–ü–æ–ª: {user_data[user_id]["gender"]}\n'
    if 'status' in user_data[user_id]:
        progress_message += f'–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user_data[user_id]["status"]}\n'
    if 'city' in user_data[user_id]:
        progress_message += f'–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {user_data[user_id]["city"]}\n'
    if 'univ' in user_data[user_id]:
        progress_message += f'–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {user_data[user_id]["univ"]}\n'
    if 'facultate' in user_data[user_id]:
        progress_message += f'–§–∞–∫—É–ª—å—Ç–µ—Ç: {user_data[user_id]["facultate"]}\n'
    if 'formed' in user_data[user_id]:
        progress_message += f'–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {user_data[user_id]["formed"]}\n'
    if 'year' in user_data[user_id]:
        progress_message += f'–ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {user_data[user_id]["year"]}\n'
    if 'prof' in user_data[user_id]:
        progress_message += f'–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {user_data[user_id]["prof"]}\n'
    if 'post' in user_data[user_id]:
        progress_message += f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_data[user_id]["post"]}\n'
    if 'exp' in user_data[user_id]:
        progress_message += f'–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {user_data[user_id]["exp"]}\n'
    if 'dopinf' in user_data[user_id]:
        progress_message += f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–∞–º–∞—Ü–∏—è: {user_data[user_id]["dopinf"]}\n'
    if 'link' in user_data[user_id]:
        progress_message += f'–°—Å—ã–ª–∫–∏: {user_data[user_id]["link"]}\n'

    bot.send_message(chat_id, progress_message, parse_mode='html')

    markup_inline = types.InlineKeyboardMarkup()
    button_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='confirm_resume_generation')
    button_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='cancel_resume_generation')
    markup_inline.add(button_yes, button_no)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(chat_id, '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ?', reply_markup=markup_inline)

@bot.callback_query_handler(func=lambda call: True)
def handle_confirmation_callback(call):
    user_id = call.from_user.id

    if call.data == 'confirm_resume_generation':
        #–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ
        # ...
        bot.send_message(call.message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüòä')


    elif call.data == 'cancel_resume_generation':
        # –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ
        user_data.pop(user_id, None)
        bot.send_message(call.message.chat.id, '–¢—ã –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ. –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ãüòî')

def personal_info(chat_id):
    bot.send_message(chat_id, f'<b>–®–∞–≥ 2 –∏–∑ 5</b>. –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n', parse_mode='html')
    bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.')

def ask_for_email(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.')

def ask_for_phone(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')

def is_valid_email(email):
    email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(email_regex, email)

def is_valid_phone(phone):
    phone_regex = r'^\+(\d{1,15})$'
    return re.match(phone_regex, phone)

def ask_for_citizenship(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ.')

def ask_for_birthdate(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ __.__.____ .')

def is_valid_birthdate(birthdate):
    try:
        date_object = datetime.strptime(birthdate, '%d.%m.%Y')
        if 1960 <= date_object.year <= 2023:
            return True
        else:
            return False
    except ValueError:
        return False

def ask_for_gender(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª.')

def ask_for_status(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.')

def ask_for_city(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.')

def ask_for_univ(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ.')

def ask_for_facultate(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç.')

def ask_for_formed(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ—é —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è.')

def ask_for_year(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.')

def ask_for_prof(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.')

def ask_for_post(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ –ø—Ä–æ—à–ª—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å.')

def ask_for_exp(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.')

def ask_for_dopinf(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏.')

def ask_for_link(chat_id):
    bot.send_message(chat_id, '–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.')

def edit_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    item1 = types.KeyboardButton('–®–∞–≥ 1')
    item2 = types.KeyboardButton('–®–∞–≥ 2')
    item3 = types.KeyboardButton('–®–∞–≥ 3')
    item4 = types.KeyboardButton('–®–∞–≥ 4')
    item5 = types.KeyboardButton('–®–∞–≥ 5')
    item6 = types.KeyboardButton('–ù–∞–∑–∞–¥')

    markup.add(item1, item2, item3, item4, item5, item6)

    bot.send_message(chat_id, '–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def get_personal_info(message):
    global STEP
    user_id = message.from_user.id

    if 'name' not in user_data[user_id]:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è
        name_parts = message.text.split()
        if len(name_parts) == 3:
            if name_parts[0].isalpha() and name_parts[1].isalpha() and name_parts[2].isalpha():
                user_data[user_id]['name'] = name_parts[0].capitalize()
                user_data[user_id]['lastname'] = name_parts[1].capitalize()
                user_data[user_id]['patr'] = name_parts[2].capitalize()
                STEP += 1
                ask_for_email(message.chat.id)  # 2 –≤–æ–ø—Ä–æ—Å
            else:
                bot.send_message(message.chat.id,'–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.')
        else:
            bot.send_message(message.chat.id,'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è, —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ —Ç—Ä–µ—Ö —Å–ª–æ–≤ (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –æ—Ç—á–µ—Å—Ç–≤–æ).')
    elif 'email' not in user_data[user_id]:
        email = message.text.strip()

        if is_valid_email(email):
            user_data[user_id]['email'] = email
            STEP += 1
            ask_for_phone(message.chat.id)#3 –≤–æ–ø—Ä–æ—Å
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')
    elif 'phone' not in user_data[user_id]:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = message.text.strip()

        if is_valid_phone(phone):
            if len(phone) == 12:
                user_data[user_id]['phone'] = phone
                STEP += 1
                ask_for_citizenship(message.chat.id)#4 –≤–æ–ø—Ä–æ—Å
            else:
                bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π')
        else:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: +7')
    elif 'citizenship' not in user_data[user_id]:
        citizenship = message.text.strip()
        user_data[user_id]['citizenship'] = citizenship
        STEP += 1
        #ask_for_birthdate(message.chat.id)
    elif 'birthdate' not in user_data[user_id]:
        birthdate = message.text.strip()
        print(birthdate)
        if is_valid_birthdate(birthdate):
            user_data[user_id]['birthdate'] = birthdate

            ask_for_gender(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')
    elif 'gender' not in user_data[user_id]:
        gender = message.text.strip()
        if gender.lower() == '–∂–µ–Ω—Å–∫–∏–π' or gender.lower() == '–º—É–∂—Å–∫–æ–π':

            user_data[user_id]['gender'] = gender.capitalize()

            ask_for_status(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ª–∏–±–æ –∂–µ–Ω—Å–∫–∏–π, –ª–∏–±–æ –º—É–∂—Å–∫–æ–π.')

    elif 'status' not in user_data[user_id]:
        status = message.text.strip()

        if all(word.isalpha() or word.isspace() for word in status.split()):
            user_data[user_id]['status'] = status.capitalize()
            ask_for_city(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.')


    elif 'city' not in user_data[user_id]:
        city = message.text.strip()
        if all(word.isalpha() or word.isspace() for word in city.split()):
            user_data[user_id]['city'] = city.capitalize()
            bot.send_message(message.chat.id, '<b>–®–∞–≥ 3 –∏–∑ 5.</b> –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.', parse_mode='html')

            ask_for_univ(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.')


    elif 'univ' not in user_data[user_id]:
        univ = message.text.strip()
        if all(word.isalpha() or word.isspace() for word in univ.split()):
            user_data[user_id]['univ'] = univ
            ask_for_facultate(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.')


    elif 'facultate' not in user_data[user_id]:
        facultate = message.text.strip()
        if all(word.isalpha() or word.isspace() for word in facultate.split()):
            user_data[user_id]['facultate'] = facultate.capitalize()
            ask_for_formed(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.')


    elif 'formed' not in user_data[user_id]:
        formed = message.text.strip()
        if all(word.isalpha() or word.isspace() for word in formed.split()):
            user_data[user_id]['formed'] = formed.capitalize()
            ask_for_year(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.')

    elif 'year' not in user_data[user_id]:
        year = message.text.strip()
        if year.isdigit() and int(year) > 1980:
            user_data[user_id]['year'] = year
            ask_for_prof(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ–¥.')


    elif 'prof' not in user_data[user_id]:
        prof = message.text.strip()
        if all(word.isalpha() or word.isspace() for word in prof.split()):
            user_data[user_id]['prof'] = prof.capitalize()

            bot.send_message(message.chat.id, '<b>–®–∞–≥ 4 –∏–∑ 5.</b> –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.', parse_mode='html')
            ask_for_post(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.')


    elif 'post' not in user_data[user_id]:
        post = message.text.strip()
        if all(word.isalpha() or word.isspace() for word in post.split()):
            user_data[user_id]['post'] = post.capitalize()
            ask_for_exp(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.')


    elif 'exp' not in user_data[user_id]:
        exp = message.text.strip()
        user_data[user_id]['exp'] = exp.capitalize()
        ask_for_dopinf(message.chat.id)

    elif 'dopinf' not in user_data[user_id]:
        dopinf = message.text.strip()
        if len(dopinf) > 120:
            user_data[user_id]['dopinf'] = dopinf
            ask_for_link(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 120 —Å–∏–º–≤–æ–ª–æ–≤', parse_mode='html')


    elif 'link' not in user_data[user_id]:
        link = message.text.strip()
        user_data[user_id]['link'] = link

        bot.send_message(message.chat.id, '<b>–®–∞–≥ 5 –∏–∑ 5.</b> –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!', parse_mode='html')

        show_progress(message.chat.id)
        """


    if STEP == 5:
        edit_menu({'message': {'chat': {'id': user_id}}})"""



bot.polling(none_stop=True)
